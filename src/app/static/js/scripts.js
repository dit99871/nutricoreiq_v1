document.addEventListener("DOMContentLoaded", function () {
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –ø–∞—Ä–æ–ª—è (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    function initPasswordToggles() {
        document.querySelectorAll('.toggle-password').forEach(button => {
            button.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const input = document.getElementById(targetId);
                if (input) {
                    input.type = input.type === 'password' ? 'text' : 'password';
                    const icon = this.querySelector('i');
                    if (icon) {
                        icon.classList.toggle('bi-eye');
                        icon.classList.toggle('bi-eye-slash');
                    }
                }
            });
        });
    }

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    function initTheme() {
        const themeToggle = document.getElementById("themeToggle");
        if (themeToggle) {
            themeToggle.addEventListener("click", () => {
                const isDark = document.body.classList.toggle("dark-mode");
                localStorage.setItem("theme", isDark ? "dark" : "light");
                themeToggle.textContent = isDark ? "‚òÄÔ∏è" : "üåô";
            });
        }
    }

    // 3. Secure Fetch —Ñ—É–Ω–∫—Ü–∏—è (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    async function secureFetch(url, options = {}) {
        const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;
        const headers = {
            ...(options.headers || {}),
            ...(csrfToken ? { 'X-CSRF-Token': csrfToken } : {}),
        };

        try {
            const response = await fetch(url, {
                ...options,
                headers,
            });

            if (!response.ok) {
                const error = await response.json().catch(() => ({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
                throw new Error(error.detail || error.message || `–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
            }
            return await response.json();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
            throw error;
        }
    }

    // 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    const loginForm = document.getElementById("loginForm");
    if (loginForm) {
        loginForm.addEventListener("submit", async function(event) {
            event.preventDefault();
            const submitButton = loginForm.querySelector("button[type='submit']");
            const originalText = submitButton.textContent;
            submitButton.disabled = true;
            submitButton.textContent = "–í—Ö–æ–¥...";

            try {
                const formData = new FormData(loginForm);
                const loginResponse = await secureFetch("/api/v1/auth/login", {
                    method: "POST",
                    body: new URLSearchParams({
                        username: formData.get("username"),
                        password: formData.get("password")
                    }),
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                    }
                });

                const userData = await secureFetch("/api/v1/user/me");
                updateUIForAuthenticatedUser(userData);

                const modal = bootstrap.Modal.getInstance(document.getElementById('loginModal'));
                if (modal) modal.hide();
                loginForm.reset();

                if (window.location.pathname.includes('/profile')) {
                    await loadProfileData();
                }

            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
                const errorElement = document.getElementById("loginError");
                if (errorElement) {
                    errorElement.textContent = error.message;
                    errorElement.classList.remove('d-none');
                }
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = originalText;
            }
        });
    }

    // 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    const registerForm = document.getElementById("registerForm");
    if (registerForm) {
        registerForm.addEventListener("submit", async function(event) {
            event.preventDefault();
            const submitButton = registerForm.querySelector("button[type='submit']");
            const originalText = submitButton.textContent;
            submitButton.disabled = true;
            submitButton.textContent = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...";

            const errorElement = document.getElementById("registerError");
            errorElement.textContent = "";
            errorElement.classList.add("d-none");

            const password = registerForm.querySelector("#regPassword").value;
            const confirmPassword = registerForm.querySelector("#regConfirmPassword").value;

            if (password !== confirmPassword) {
                errorElement.textContent = "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç";
                errorElement.classList.remove("d-none");
                submitButton.disabled = false;
                submitButton.textContent = originalText;
                return;
            }

            if (password.length < 8) {
                errorElement.textContent = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤";
                errorElement.classList.remove("d-none");
                submitButton.disabled = false;
                submitButton.textContent = originalText;
                return;
            }

            try {
                const formData = new FormData(registerForm);
                const data = {
                    username: formData.get("username"),
                    email: formData.get("email"),
                    password: formData.get("password")
                };

                const csrfToken = document.querySelector('meta[name="csrf-token"]').content;

                const response = await secureFetch(registerForm.action, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRF-Token": csrfToken
                    },
                    body: JSON.stringify(data)
                });

                const modal = bootstrap.Modal.getInstance(document.getElementById('registerModal'));
                if (modal) modal.hide();

                alert("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.");
                registerForm.reset();

                const loginModal = new bootstrap.Modal(document.getElementById('loginModal'));
                loginModal.show();

            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
                errorElement.textContent = error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏";
                errorElement.classList.remove("d-none");

                if (error.errors) {
                    const errorMessages = Object.values(error.errors).join("\n");
                    errorElement.textContent = errorMessages;
                }
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = originalText;
            }
        });
    }

    // 6. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
    async function loadProfileData() {
        try {
            const profileData = await secureFetch('/api/v1/user/profile/data');
            updateProfileUI(profileData);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è');
            if (error.message.includes('401')) {
                window.location.href = '/api/v1/auth/login';
            }
        }
    }

    function updateProfileUI(profileData) {
        if (profileData.gender) {
            document.getElementById('gender-field').textContent =
                profileData.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π';
        }
        if (profileData.age !== undefined && profileData.age !== null) {
            document.getElementById('age-field').textContent = profileData.age;
        } else {
            document.getElementById('age-field').textContent = '–ù–µ —É–∫–∞–∑–∞–Ω';
        }
        if (profileData.height !== undefined && profileData.height !== null) {
            document.getElementById('height-field').textContent = `${profileData.height} —Å–º`;
        } else {
            document.getElementById('height-field').textContent = '–ù–µ —É–∫–∞–∑–∞–Ω';
        }
        if (profileData.weight !== undefined && profileData.weight !== null) {
            document.getElementById('weight-field').textContent = `${profileData.weight} –∫–≥`;
        } else {
            document.getElementById('weight-field').textContent = '–ù–µ —É–∫–∞–∑–∞–Ω';
        }
        if (profileData.created_at) {
            try {
                const date = new Date(profileData.created_at);
                document.getElementById('registration-date-field').textContent =
                    date.toLocaleDateString('ru-RU') + ' ' + date.toLocaleTimeString('ru-RU', {hour: '2-digit', minute:'2-digit'});
            } catch (e) {
                document.getElementById('registration-date-field').textContent = profileData.created_at;
            }
        }
    }

    // 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –º–æ–¥–∞–ª–æ–∫)
    function updateUIForAuthenticatedUser(user) {
        const authSection = document.querySelector('.navbar-collapse .ms-auto');
        if (!authSection) return;

        authSection.innerHTML = `
            <p class="mb-0 me-3">–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ <strong>${escapeHtml(user.username)}</strong></p>
            <button id="profileBtn" class="btn btn-primary">–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</button>
            <a href="/api/v1/user/logout" class="btn btn-outline-danger">–í—ã–π—Ç–∏</a>
            <button class="theme-toggle" id="themeToggle" title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É">
                ${document.body.classList.contains('dark-mode') ? '‚òÄÔ∏è' : 'üåô'}
            </button>
        `;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        document.getElementById('profileBtn')?.addEventListener('click', function() {
            if (window.location.pathname.includes('/api/v1/user/profile/data')) {
                loadProfileData();
            } else {
                window.location.href = '/api/v1/user/profile/data';
            }
        });

        initTheme();
    }

    // 8. –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    document.querySelector('a[href*="/logout"]')?.addEventListener('click', async function(e) {
        e.preventDefault();
        try {
            await secureFetch("/api/v1/user/logout", { method: "POST" });
            window.location.href = "/";
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
        }
    });

    // 9. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ + –¥–æ–±–∞–≤–ª–µ–Ω–æ)
    function escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    function showError(message) {
        const errorElement = document.getElementById('profile-error');
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.classList.remove('d-none');
        }
    }

    function showSuccess(message) {
        const successElement = document.getElementById('profile-success');
        if (successElement) {
            successElement.textContent = message;
            successElement.classList.remove('d-none');
            setTimeout(() => successElement.classList.add('d-none'), 5000);
        }
    }

    // 10. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
    const savedTheme = localStorage.getItem("theme") ||
        (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light");
    document.body.classList.toggle("dark-mode", savedTheme === "dark");

    initTheme();
    initPasswordToggles();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    function initProfileModals() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
        document.querySelector('a[href="/api/v1/user/profile/update"]')?.addEventListener('click', function(e) {
            e.preventDefault();
            showEditProfileModal();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"
        document.querySelector('a[href="/api/v1/user/password/change"]')?.addEventListener('click', function(e) {
            e.preventDefault();
            showChangePasswordModal();
        });
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    async function showEditProfileModal() {
        try {
            const profileData = await secureFetch('/api/v1/user/profile/data');

            const modalHtml = `
                <div class="modal fade" id="editProfileModal" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form id="editProfileForm">
                                    <div class="mb-3">
                                        <label class="form-label">–ü–æ–ª</label>
                                        <select class="form-select" name="gender" id="editGender">
                                            <option value="">–ù–µ —É–∫–∞–∑–∞–Ω</option>
                                            <option value="male" ${profileData.gender === 'male' ? 'selected' : ''}>–ú—É–∂—Å–∫–æ–π</option>
                                            <option value="female" ${profileData.gender === 'female' ? 'selected' : ''}>–ñ–µ–Ω—Å–∫–∏–π</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">–í–æ–∑—Ä–∞—Å—Ç</label>
                                        <input type="number" class="form-control" name="age" id="editAge"
                                               value="${profileData.age || ''}" min="1" max="120">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">–†–æ—Å—Ç (—Å–º)</label>
                                        <input type="number" class="form-control" name="height" id="editHeight"
                                               value="${profileData.height || ''}" min="50" max="250">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">–í–µ—Å (–∫–≥)</label>
                                        <input type="number" class="form-control" name="weight" id="editWeight"
                                               value="${profileData.weight || ''}" min="20" max="300">
                                    </div>
                                    <div id="editProfileError" class="alert alert-danger d-none"></div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                                <button type="button" class="btn btn-primary" id="saveProfileBtn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            let modalElement = document.getElementById('editProfileModal');
            if (!modalElement) {
                modalElement = document.createElement('div');
                document.body.appendChild(modalElement);
            }
            modalElement.innerHTML = modalHtml;

            const modal = new bootstrap.Modal(modalElement);
            modal.show();

            document.getElementById('saveProfileBtn').addEventListener('click', async function() {
                const btn = this;
                const originalText = btn.textContent;
                btn.disabled = true;
                btn.textContent = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...";

                try {
                    const formData = {
                        gender: document.getElementById('editGender').value || null,
                        age: document.getElementById('editAge').value ? parseInt(document.getElementById('editAge').value) : null,
                        height: document.getElementById('editHeight').value ? parseInt(document.getElementById('editHeight').value) : null,
                        weight: document.getElementById('editWeight').value ? parseInt(document.getElementById('editWeight').value) : null
                    };

                    const response = await secureFetch('/api/v1/user/profile/update', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });

                    updateProfileUI(response);
                    modal.hide();
                    showSuccess('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');

                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
                    const errorElement = document.getElementById('editProfileError');
                    errorElement.textContent = error.message;
                    errorElement.classList.remove('d-none');
                } finally {
                    btn.disabled = false;
                    btn.textContent = originalText;
                }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:', error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        }
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
    function showChangePasswordModal() {
        const modalHtml = `
            <div class="modal fade" id="changePasswordModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="changePasswordForm">
                                <div class="mb-3">
                                    <label class="form-label">–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å</label>
                                    <div class="input-group">
                                        <input type="password" class="form-control" name="current_password" id="currentPassword" required>
                                        <button class="btn btn-outline-secondary toggle-password" type="button" data-target="currentPassword">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
                                    <div class="input-group">
                                        <input type="password" class="form-control" name="new_password" id="newPassword" required minlength="8">
                                        <button class="btn btn-outline-secondary toggle-password" type="button" data-target="newPassword">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                    </div>
                                    <div class="form-text">–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤</div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
                                    <div class="input-group">
                                        <input type="password" class="form-control" name="confirm_password" id="confirmPassword" required minlength="8">
                                        <button class="btn btn-outline-secondary toggle-password" type="button" data-target="confirmPassword">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                    </div>
                                </div>
                                <div id="changePasswordError" class="alert alert-danger d-none"></div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                            <button type="button" class="btn btn-primary" id="savePasswordBtn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        </div>
                    </div>
                </div>
            </div>
        `;

        let modalElement = document.getElementById('changePasswordModal');
        if (!modalElement) {
            modalElement = document.createElement('div');
            document.body.appendChild(modalElement);
        }
        modalElement.innerHTML = modalHtml;

        const modal = new bootstrap.Modal(modalElement);
        modal.show();
        initPasswordToggles();

        document.getElementById('savePasswordBtn').addEventListener('click', async function() {
            const btn = this;
            const originalText = btn.textContent;
            btn.disabled = true;
            btn.textContent = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...";

            try {
                const form = document.getElementById('changePasswordForm');
                const newPassword = form.new_password.value;
                const confirmPassword = form.confirm_password.value;

                if (newPassword !== confirmPassword) {
                    throw new Error('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
                }

                if (newPassword.length < 8) {
                    throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤');
                }

                await secureFetch('/api/v1/user/password/change', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        current_password: form.current_password.value,
                        new_password: newPassword
                    })
                });

                modal.hide();
                showSuccess('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
                form.reset();

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', error);
                const errorElement = document.getElementById('changePasswordError');
                errorElement.textContent = error.message;
                errorElement.classList.remove('d-none');
            } finally {
                btn.disabled = false;
                btn.textContent = originalText;
            }
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    initProfileModals();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ—Ñ–∏–ª—è
    if (window.location.pathname.includes('/api/v1/user/profile/data')) {
        loadProfileData();
    }
});