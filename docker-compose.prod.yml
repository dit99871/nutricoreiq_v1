version: "3.9"
services:
  db:
    image: postgres:latest
    container_name: postgre
    ports:
<<<<<<< HEAD
      - "127.0.0.1:${POSTGRES_PORT}:${POSTGRES_PORT}"
=======
      - "127.0.0.1:${DB_PORT}:${DB_PORT}"
>>>>>>> e3b443e074f1d0db28babd3af9a45dc4c6b9fa51
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/pg_hba.conf:/var/lib/postgresql/pg_hba.conf:ro
      - ./postgresql.conf:/var/lib/postgresql/data/postgresql.conf:ro
    command: -c config_file=/var/lib/postgresql/data/postgresql.conf
    networks:
      - db-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    user: "999:999"
    cap_drop:
      - ALL

  postgres_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: postgres_exporter
    env_file:
      - .env
    environment:
<<<<<<< HEAD
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=${POSTGRES_SSL_MODE}
=======
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${DB_PORT}/${POSTGRES_DB}?sslmode=${POSTGRES_SSL_MODE}
>>>>>>> e3b443e074f1d0db28babd3af9a45dc4c6b9fa51
    volumes:
      - ./postgres_exporter.yml:/postgres_exporter.yml:ro
    command:
      - "--web.listen-address=:9187"
      - "--extend.query-path=/postgres_exporter.yml"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - db-network
      - monitoring-network
<<<<<<< HEAD
=======
    user: "1000:1000"  # Non-root
    cap_drop:
      - ALL
>>>>>>> e3b443e074f1d0db28babd3af9a45dc4c6b9fa51

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "127.0.0.1:${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - db-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    user: "999:999"
    cap_drop:
      - ALL

  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis_exporter
    environment:
      - REDIS_ADDR=${REDIS_ADDR}
      - LOG_LEVEL=${REDIS_LOG_LEVEL}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - db-network
      - monitoring-network
<<<<<<< HEAD
=======
    user: "1000:1000"
    cap_drop:
      - ALL
>>>>>>> e3b443e074f1d0db28babd3af9a45dc4c6b9fa51

  rabbitmq:
    image: rabbitmq:3-management-alpine
    hostname: rabbitmq
    container_name: rabbitmq
    ports:
      - "127.0.0.1:${RABBITMQ_PORT}:${RABBITMQ_PORT}"
    env_file:
      - .env
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics -q ping && rabbitmqctl status" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - db-network
<<<<<<< HEAD
=======
    user: "1000:1000"
    cap_drop:
      - ALL
>>>>>>> e3b443e074f1d0db28babd3af9a45dc4c6b9fa51

  fastapi:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
<<<<<<< HEAD
      - "0.0.0.0:${APP_CONFIG__RUN__PORT}:${APP_CONFIG__RUN__PORT}"
    volumes:
      - ./src/app/core/certs:/nutricoreiq/src/app/core/certs:ro
=======
      - "0.0.0.0:${APP_PORT}:${APP_PORT}"
    volumes:
      - ./src/app/utils/certs:/nutricoreiq/src/app/utils/certs:ro
>>>>>>> e3b443e074f1d0db28babd3af9a45dc4c6b9fa51
      - ./src/app/logs:/nutricoreiq/src/app/logs
    container_name: web_app
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - db-network
      - app-network
    healthcheck:
<<<<<<< HEAD
      test: ["CMD", "curl", "-f", "http://localhost:${APP_CONFIG__RUN__PORT}"]
=======
      test: ["CMD", "curl", "-f", "http://localhost:${APP_PORT}"]
>>>>>>> e3b443e074f1d0db28babd3af9a45dc4c6b9fa51
      interval: 5s
      timeout: 5s
      retries: 5
    user: "1000:1000"
    read_only: true  # Если app не пишет в fs
    tmpfs:
      - /tmp:size=100M
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  taskiq_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: taskiq_worker
    command: >
      bash -c "sleep 30 && taskiq worker src.app.core.services.taskiq_broker:broker --workers 1 --fs-discover --tasks-pattern '**/tasks'"
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src/app/core/certs:/nutricoreiq/src/app/core/certs:ro
      - ./src/app/logs:/nutricoreiq/src/app/logs
    networks:
      - db-network
<<<<<<< HEAD
=======
    user: "1000:1000"
    cap_drop:
      - ALL
>>>>>>> e3b443e074f1d0db28babd3af9a45dc4c6b9fa51

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - monitoring-network
<<<<<<< HEAD
=======
    user: "1000:1000"
    cap_drop:
      - ALL
>>>>>>> e3b443e074f1d0db28babd3af9a45dc4c6b9fa51

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SERVER_PROTOCOL=${GF_SERVER_PROTOCOL}
      - GF_SERVER_DOMAIN=${GF_SERVER_DOMAIN}
      - GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring-network
<<<<<<< HEAD
=======
    user: "472:472"  # Grafana default UID
    cap_drop:
      - ALL
>>>>>>> e3b443e074f1d0db28babd3af9a45dc4c6b9fa51

  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: nginx
    ports:
      - "${HTTP_PORT}:${HTTP_PORT}"
      - "${HTTPS_PORT}:${HTTPS_PORT}"
    volumes:
      - /etc/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - /etc/nginx/sites-available:/etc/nginx/sites-available:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - fastapi
    networks:
      - app-network
<<<<<<< HEAD
      - monitoring-network
=======
    user: "101:101"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
>>>>>>> e3b443e074f1d0db28babd3af9a45dc4c6b9fa51

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    ports:
      - "127.0.0.1:9100:9100"
    networks:
      - monitoring-network
<<<<<<< HEAD
=======
    user: "1000:1000"
    cap_drop:
      - ALL
>>>>>>> e3b443e074f1d0db28babd3af9a45dc4c6b9fa51

  nginx_exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx_exporter
<<<<<<< HEAD
    command: --nginx.scrape-uri=http://nginx:${APP_CONFIG__RUN__PORT}/stub_status
    networks:
      - monitoring-network
=======
    command: --nginx.scrape-uri=http://nginx:${HTTP_PORT}/stub_status
    networks:
      - monitoring-network
    user: "1000:1000"
    cap_drop:
      - ALL
>>>>>>> e3b443e074f1d0db28babd3af9a45dc4c6b9fa51

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  rabbitmq-data:

networks:
  app-network:
    driver: bridge
  db-network:
    driver: bridge  # Для DB, Redis, RabbitMQ, App
  monitoring-network:
<<<<<<< HEAD
    driver: bridge  # Для exporters, Prometheus, Grafana
=======
    driver: bridge  # Для exporters, Prometheus, Grafana
>>>>>>> e3b443e074f1d0db28babd3af9a45dc4c6b9fa51
